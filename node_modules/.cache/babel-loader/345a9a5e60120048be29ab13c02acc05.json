{"ast":null,"code":"'use strict';\n\nconst http = require('http');\n\nconst https = require('https');\n\nconst resolveALPN = require('resolve-alpn');\n\nconst QuickLRU = require('quick-lru');\n\nconst Http2ClientRequest = require('./client-request');\n\nconst calculateServerName = require('./utils/calculate-server-name');\n\nconst urlToOptions = require('./utils/url-to-options');\n\nconst cache = new QuickLRU({\n  maxSize: 100\n});\nconst queue = new Map();\n\nconst installSocket = (agent, socket, options) => {\n  socket._httpMessage = {\n    shouldKeepAlive: true\n  };\n\n  const onFree = () => {\n    agent.emit('free', socket, options);\n  };\n\n  socket.on('free', onFree);\n\n  const onClose = () => {\n    agent.removeSocket(socket, options);\n  };\n\n  socket.on('close', onClose);\n\n  const onRemove = () => {\n    agent.removeSocket(socket, options);\n    socket.off('close', onClose);\n    socket.off('free', onFree);\n    socket.off('agentRemove', onRemove);\n  };\n\n  socket.on('agentRemove', onRemove);\n  agent.emit('free', socket, options);\n};\n\nconst resolveProtocol = async options => {\n  const name = `${options.host}:${options.port}:${options.ALPNProtocols.sort()}`;\n\n  if (!cache.has(name)) {\n    if (queue.has(name)) {\n      const result = await queue.get(name);\n      return result.alpnProtocol;\n    }\n\n    const {\n      path,\n      agent\n    } = options;\n    options.path = options.socketPath;\n    const resultPromise = resolveALPN(options);\n    queue.set(name, resultPromise);\n\n    try {\n      const {\n        socket,\n        alpnProtocol\n      } = await resultPromise;\n      cache.set(name, alpnProtocol);\n      options.path = path;\n\n      if (alpnProtocol === 'h2') {\n        // https://github.com/nodejs/node/issues/33343\n        socket.destroy();\n      } else {\n        const {\n          globalAgent\n        } = https;\n        const defaultCreateConnection = https.Agent.prototype.createConnection;\n\n        if (agent) {\n          if (agent.createConnection === defaultCreateConnection) {\n            installSocket(agent, socket, options);\n          } else {\n            socket.destroy();\n          }\n        } else if (globalAgent.createConnection === defaultCreateConnection) {\n          installSocket(globalAgent, socket, options);\n        } else {\n          socket.destroy();\n        }\n      }\n\n      queue.delete(name);\n      return alpnProtocol;\n    } catch (error) {\n      queue.delete(name);\n      throw error;\n    }\n  }\n\n  return cache.get(name);\n};\n\nmodule.exports = async (input, options, callback) => {\n  if (typeof input === 'string' || input instanceof URL) {\n    input = urlToOptions(new URL(input));\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  options = {\n    ALPNProtocols: ['h2', 'http/1.1'],\n    ...input,\n    ...options,\n    resolveSocket: true\n  };\n\n  if (!Array.isArray(options.ALPNProtocols) || options.ALPNProtocols.length === 0) {\n    throw new Error('The `ALPNProtocols` option must be an Array with at least one entry');\n  }\n\n  options.protocol = options.protocol || 'https:';\n  const isHttps = options.protocol === 'https:';\n  options.host = options.hostname || options.host || 'localhost';\n  options.session = options.tlsSession;\n  options.servername = options.servername || calculateServerName(options);\n  options.port = options.port || (isHttps ? 443 : 80);\n  options._defaultAgent = isHttps ? https.globalAgent : http.globalAgent;\n  const agents = options.agent;\n\n  if (agents) {\n    if (agents.addRequest) {\n      throw new Error('The `options.agent` object can contain only `http`, `https` or `http2` properties');\n    }\n\n    options.agent = agents[isHttps ? 'https' : 'http'];\n  }\n\n  if (isHttps) {\n    const protocol = await resolveProtocol(options);\n\n    if (protocol === 'h2') {\n      if (agents) {\n        options.agent = agents.http2;\n      }\n\n      return new Http2ClientRequest(options, callback);\n    }\n  }\n\n  return http.request(options, callback);\n};\n\nmodule.exports.protocolCache = cache;","map":{"version":3,"names":["http","require","https","resolveALPN","QuickLRU","Http2ClientRequest","calculateServerName","urlToOptions","cache","maxSize","queue","Map","installSocket","agent","socket","options","_httpMessage","shouldKeepAlive","onFree","emit","on","onClose","removeSocket","onRemove","off","resolveProtocol","name","host","port","ALPNProtocols","sort","has","result","get","alpnProtocol","path","socketPath","resultPromise","set","destroy","globalAgent","defaultCreateConnection","Agent","prototype","createConnection","delete","error","module","exports","input","callback","URL","undefined","resolveSocket","Array","isArray","length","Error","protocol","isHttps","hostname","session","tlsSession","servername","_defaultAgent","agents","addRequest","http2","request","protocolCache"],"sources":["C:/Users/hamzu/Desktop/React/React projects/react-store/node_modules/http2-wrapper/source/auto.js"],"sourcesContent":["'use strict';\nconst http = require('http');\nconst https = require('https');\nconst resolveALPN = require('resolve-alpn');\nconst QuickLRU = require('quick-lru');\nconst Http2ClientRequest = require('./client-request');\nconst calculateServerName = require('./utils/calculate-server-name');\nconst urlToOptions = require('./utils/url-to-options');\n\nconst cache = new QuickLRU({maxSize: 100});\nconst queue = new Map();\n\nconst installSocket = (agent, socket, options) => {\n\tsocket._httpMessage = {shouldKeepAlive: true};\n\n\tconst onFree = () => {\n\t\tagent.emit('free', socket, options);\n\t};\n\n\tsocket.on('free', onFree);\n\n\tconst onClose = () => {\n\t\tagent.removeSocket(socket, options);\n\t};\n\n\tsocket.on('close', onClose);\n\n\tconst onRemove = () => {\n\t\tagent.removeSocket(socket, options);\n\t\tsocket.off('close', onClose);\n\t\tsocket.off('free', onFree);\n\t\tsocket.off('agentRemove', onRemove);\n\t};\n\n\tsocket.on('agentRemove', onRemove);\n\n\tagent.emit('free', socket, options);\n};\n\nconst resolveProtocol = async options => {\n\tconst name = `${options.host}:${options.port}:${options.ALPNProtocols.sort()}`;\n\n\tif (!cache.has(name)) {\n\t\tif (queue.has(name)) {\n\t\t\tconst result = await queue.get(name);\n\t\t\treturn result.alpnProtocol;\n\t\t}\n\n\t\tconst {path, agent} = options;\n\t\toptions.path = options.socketPath;\n\n\t\tconst resultPromise = resolveALPN(options);\n\t\tqueue.set(name, resultPromise);\n\n\t\ttry {\n\t\t\tconst {socket, alpnProtocol} = await resultPromise;\n\t\t\tcache.set(name, alpnProtocol);\n\n\t\t\toptions.path = path;\n\n\t\t\tif (alpnProtocol === 'h2') {\n\t\t\t\t// https://github.com/nodejs/node/issues/33343\n\t\t\t\tsocket.destroy();\n\t\t\t} else {\n\t\t\t\tconst {globalAgent} = https;\n\t\t\t\tconst defaultCreateConnection = https.Agent.prototype.createConnection;\n\n\t\t\t\tif (agent) {\n\t\t\t\t\tif (agent.createConnection === defaultCreateConnection) {\n\t\t\t\t\t\tinstallSocket(agent, socket, options);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsocket.destroy();\n\t\t\t\t\t}\n\t\t\t\t} else if (globalAgent.createConnection === defaultCreateConnection) {\n\t\t\t\t\tinstallSocket(globalAgent, socket, options);\n\t\t\t\t} else {\n\t\t\t\t\tsocket.destroy();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tqueue.delete(name);\n\n\t\t\treturn alpnProtocol;\n\t\t} catch (error) {\n\t\t\tqueue.delete(name);\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\treturn cache.get(name);\n};\n\nmodule.exports = async (input, options, callback) => {\n\tif (typeof input === 'string' || input instanceof URL) {\n\t\tinput = urlToOptions(new URL(input));\n\t}\n\n\tif (typeof options === 'function') {\n\t\tcallback = options;\n\t\toptions = undefined;\n\t}\n\n\toptions = {\n\t\tALPNProtocols: ['h2', 'http/1.1'],\n\t\t...input,\n\t\t...options,\n\t\tresolveSocket: true\n\t};\n\n\tif (!Array.isArray(options.ALPNProtocols) || options.ALPNProtocols.length === 0) {\n\t\tthrow new Error('The `ALPNProtocols` option must be an Array with at least one entry');\n\t}\n\n\toptions.protocol = options.protocol || 'https:';\n\tconst isHttps = options.protocol === 'https:';\n\n\toptions.host = options.hostname || options.host || 'localhost';\n\toptions.session = options.tlsSession;\n\toptions.servername = options.servername || calculateServerName(options);\n\toptions.port = options.port || (isHttps ? 443 : 80);\n\toptions._defaultAgent = isHttps ? https.globalAgent : http.globalAgent;\n\n\tconst agents = options.agent;\n\n\tif (agents) {\n\t\tif (agents.addRequest) {\n\t\t\tthrow new Error('The `options.agent` object can contain only `http`, `https` or `http2` properties');\n\t\t}\n\n\t\toptions.agent = agents[isHttps ? 'https' : 'http'];\n\t}\n\n\tif (isHttps) {\n\t\tconst protocol = await resolveProtocol(options);\n\n\t\tif (protocol === 'h2') {\n\t\t\tif (agents) {\n\t\t\t\toptions.agent = agents.http2;\n\t\t\t}\n\n\t\t\treturn new Http2ClientRequest(options, callback);\n\t\t}\n\t}\n\n\treturn http.request(options, callback);\n};\n\nmodule.exports.protocolCache = cache;\n"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAMK,mBAAmB,GAAGL,OAAO,CAAC,+BAAD,CAAnC;;AACA,MAAMM,YAAY,GAAGN,OAAO,CAAC,wBAAD,CAA5B;;AAEA,MAAMO,KAAK,GAAG,IAAIJ,QAAJ,CAAa;EAACK,OAAO,EAAE;AAAV,CAAb,CAAd;AACA,MAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;;AAEA,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,MAAR,EAAgBC,OAAhB,KAA4B;EACjDD,MAAM,CAACE,YAAP,GAAsB;IAACC,eAAe,EAAE;EAAlB,CAAtB;;EAEA,MAAMC,MAAM,GAAG,MAAM;IACpBL,KAAK,CAACM,IAAN,CAAW,MAAX,EAAmBL,MAAnB,EAA2BC,OAA3B;EACA,CAFD;;EAIAD,MAAM,CAACM,EAAP,CAAU,MAAV,EAAkBF,MAAlB;;EAEA,MAAMG,OAAO,GAAG,MAAM;IACrBR,KAAK,CAACS,YAAN,CAAmBR,MAAnB,EAA2BC,OAA3B;EACA,CAFD;;EAIAD,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmBC,OAAnB;;EAEA,MAAME,QAAQ,GAAG,MAAM;IACtBV,KAAK,CAACS,YAAN,CAAmBR,MAAnB,EAA2BC,OAA3B;IACAD,MAAM,CAACU,GAAP,CAAW,OAAX,EAAoBH,OAApB;IACAP,MAAM,CAACU,GAAP,CAAW,MAAX,EAAmBN,MAAnB;IACAJ,MAAM,CAACU,GAAP,CAAW,aAAX,EAA0BD,QAA1B;EACA,CALD;;EAOAT,MAAM,CAACM,EAAP,CAAU,aAAV,EAAyBG,QAAzB;EAEAV,KAAK,CAACM,IAAN,CAAW,MAAX,EAAmBL,MAAnB,EAA2BC,OAA3B;AACA,CAzBD;;AA2BA,MAAMU,eAAe,GAAG,MAAMV,OAAN,IAAiB;EACxC,MAAMW,IAAI,GAAI,GAAEX,OAAO,CAACY,IAAK,IAAGZ,OAAO,CAACa,IAAK,IAAGb,OAAO,CAACc,aAAR,CAAsBC,IAAtB,EAA6B,EAA7E;;EAEA,IAAI,CAACtB,KAAK,CAACuB,GAAN,CAAUL,IAAV,CAAL,EAAsB;IACrB,IAAIhB,KAAK,CAACqB,GAAN,CAAUL,IAAV,CAAJ,EAAqB;MACpB,MAAMM,MAAM,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CAAUP,IAAV,CAArB;MACA,OAAOM,MAAM,CAACE,YAAd;IACA;;IAED,MAAM;MAACC,IAAD;MAAOtB;IAAP,IAAgBE,OAAtB;IACAA,OAAO,CAACoB,IAAR,GAAepB,OAAO,CAACqB,UAAvB;IAEA,MAAMC,aAAa,GAAGlC,WAAW,CAACY,OAAD,CAAjC;IACAL,KAAK,CAAC4B,GAAN,CAAUZ,IAAV,EAAgBW,aAAhB;;IAEA,IAAI;MACH,MAAM;QAACvB,MAAD;QAASoB;MAAT,IAAyB,MAAMG,aAArC;MACA7B,KAAK,CAAC8B,GAAN,CAAUZ,IAAV,EAAgBQ,YAAhB;MAEAnB,OAAO,CAACoB,IAAR,GAAeA,IAAf;;MAEA,IAAID,YAAY,KAAK,IAArB,EAA2B;QAC1B;QACApB,MAAM,CAACyB,OAAP;MACA,CAHD,MAGO;QACN,MAAM;UAACC;QAAD,IAAgBtC,KAAtB;QACA,MAAMuC,uBAAuB,GAAGvC,KAAK,CAACwC,KAAN,CAAYC,SAAZ,CAAsBC,gBAAtD;;QAEA,IAAI/B,KAAJ,EAAW;UACV,IAAIA,KAAK,CAAC+B,gBAAN,KAA2BH,uBAA/B,EAAwD;YACvD7B,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgBC,OAAhB,CAAb;UACA,CAFD,MAEO;YACND,MAAM,CAACyB,OAAP;UACA;QACD,CAND,MAMO,IAAIC,WAAW,CAACI,gBAAZ,KAAiCH,uBAArC,EAA8D;UACpE7B,aAAa,CAAC4B,WAAD,EAAc1B,MAAd,EAAsBC,OAAtB,CAAb;QACA,CAFM,MAEA;UACND,MAAM,CAACyB,OAAP;QACA;MACD;;MAED7B,KAAK,CAACmC,MAAN,CAAanB,IAAb;MAEA,OAAOQ,YAAP;IACA,CA7BD,CA6BE,OAAOY,KAAP,EAAc;MACfpC,KAAK,CAACmC,MAAN,CAAanB,IAAb;MAEA,MAAMoB,KAAN;IACA;EACD;;EAED,OAAOtC,KAAK,CAACyB,GAAN,CAAUP,IAAV,CAAP;AACA,CApDD;;AAsDAqB,MAAM,CAACC,OAAP,GAAiB,OAAOC,KAAP,EAAclC,OAAd,EAAuBmC,QAAvB,KAAoC;EACpD,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYE,GAAlD,EAAuD;IACtDF,KAAK,GAAG1C,YAAY,CAAC,IAAI4C,GAAJ,CAAQF,KAAR,CAAD,CAApB;EACA;;EAED,IAAI,OAAOlC,OAAP,KAAmB,UAAvB,EAAmC;IAClCmC,QAAQ,GAAGnC,OAAX;IACAA,OAAO,GAAGqC,SAAV;EACA;;EAEDrC,OAAO,GAAG;IACTc,aAAa,EAAE,CAAC,IAAD,EAAO,UAAP,CADN;IAET,GAAGoB,KAFM;IAGT,GAAGlC,OAHM;IAITsC,aAAa,EAAE;EAJN,CAAV;;EAOA,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcxC,OAAO,CAACc,aAAtB,CAAD,IAAyCd,OAAO,CAACc,aAAR,CAAsB2B,MAAtB,KAAiC,CAA9E,EAAiF;IAChF,MAAM,IAAIC,KAAJ,CAAU,qEAAV,CAAN;EACA;;EAED1C,OAAO,CAAC2C,QAAR,GAAmB3C,OAAO,CAAC2C,QAAR,IAAoB,QAAvC;EACA,MAAMC,OAAO,GAAG5C,OAAO,CAAC2C,QAAR,KAAqB,QAArC;EAEA3C,OAAO,CAACY,IAAR,GAAeZ,OAAO,CAAC6C,QAAR,IAAoB7C,OAAO,CAACY,IAA5B,IAAoC,WAAnD;EACAZ,OAAO,CAAC8C,OAAR,GAAkB9C,OAAO,CAAC+C,UAA1B;EACA/C,OAAO,CAACgD,UAAR,GAAqBhD,OAAO,CAACgD,UAAR,IAAsBzD,mBAAmB,CAACS,OAAD,CAA9D;EACAA,OAAO,CAACa,IAAR,GAAeb,OAAO,CAACa,IAAR,KAAiB+B,OAAO,GAAG,GAAH,GAAS,EAAjC,CAAf;EACA5C,OAAO,CAACiD,aAAR,GAAwBL,OAAO,GAAGzD,KAAK,CAACsC,WAAT,GAAuBxC,IAAI,CAACwC,WAA3D;EAEA,MAAMyB,MAAM,GAAGlD,OAAO,CAACF,KAAvB;;EAEA,IAAIoD,MAAJ,EAAY;IACX,IAAIA,MAAM,CAACC,UAAX,EAAuB;MACtB,MAAM,IAAIT,KAAJ,CAAU,mFAAV,CAAN;IACA;;IAED1C,OAAO,CAACF,KAAR,GAAgBoD,MAAM,CAACN,OAAO,GAAG,OAAH,GAAa,MAArB,CAAtB;EACA;;EAED,IAAIA,OAAJ,EAAa;IACZ,MAAMD,QAAQ,GAAG,MAAMjC,eAAe,CAACV,OAAD,CAAtC;;IAEA,IAAI2C,QAAQ,KAAK,IAAjB,EAAuB;MACtB,IAAIO,MAAJ,EAAY;QACXlD,OAAO,CAACF,KAAR,GAAgBoD,MAAM,CAACE,KAAvB;MACA;;MAED,OAAO,IAAI9D,kBAAJ,CAAuBU,OAAvB,EAAgCmC,QAAhC,CAAP;IACA;EACD;;EAED,OAAOlD,IAAI,CAACoE,OAAL,CAAarD,OAAb,EAAsBmC,QAAtB,CAAP;AACA,CArDD;;AAuDAH,MAAM,CAACC,OAAP,CAAeqB,aAAf,GAA+B7D,KAA/B"},"metadata":{},"sourceType":"script"}